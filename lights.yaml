blueprint:
  name: Lights
  description: Controls lights based off an occupancy boolean.
  domain: automation
  input:
    occupancy:
      name: Occupancy
      description: These are the occupancy booleans. If multiple are selected, the lights will turn on if any of the occupanyc booleans are on.
      selector:
        entity:
          filter:
            domain: input_boolean
          multiple: true
    thresholds:
      name: Thresholds
      description: If populated, the lights will only be turned on or off when one of the selected thresholds is on. The lights will be turned off when all of the selected thresholds turn off.
      default: []
      selector:
        entity:
          filter:
            integration: threshold
          multiple: true
    white_lights:
      name: White Lights
      description: These are the white lights that will be controlled.
      default: []
      selector:
        entity:
          filter:
            domain: light
          multiple: true
    colour_lights:
      name: Coloured Lights
      description: These are the coloured lights that will be controlled.
      default: []
      selector:
        entity:
          filter:
            domain: light
          multiple: true
    generic_devices:
      name: Generic Devices
      description: These are the generic devices that will be controlled. This will work with any entity which can be turned on and off.
      default: []
      selector:
        entity:
          multiple: true
    colour:
      name: Colour
      description: This is the colour of the coloured lights.
      default: [255, 169, 87]
      selector:
        color_rgb:
    colour_temperature:
      name: Colour Temperature
      description: This is the colour temperature of the while lights.
      default: 370
      selector:
        color_temp:
    brightness:
      name: Brightness
      description: This is the brightness of the coloured and white lights.
      default: 100
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          step: 1
          unit_of_measurement: "%"
    grace_period:
      name: Grace Period
      description: This controls the time in seconds that the grace period will last, where everything will be turned back on if occupancy is detected shortly after ending.
      default: 60
      selector:
        number:
          min: 0
          max: 300
          mode: slider
          step: 1
          unit_of_measurement: s
    auto_on_occupancy:
      name: Automatically Turn Lights On from Occupancy
      description: This controls if the lights are automatically turned on when occupancy starts.
      default: true
      selector:
        boolean: {}
    auto_on_light:
      name: Automatically Turn Lights On when Getting Light
      description: This controls if the lights are automatically turned on when it is getting light.
      default: false
      selector:
        boolean: {}
    auto_on_dark:
      name: Automatically Turn Lights On when Getting Dark
      description: This controls if the lights are automatically turned on when it is getting dark.
      default: true
      selector:
        boolean: {}
    auto_off:
      name: Automatically Turn Lights Off
      description: This controls if the lights are automatically turned off.
      default: true
      selector:
        boolean: {}
variables:
  thresholds_var: !input "thresholds"
  white_lights_var: !input "white_lights"
  colour_lights_var: !input "colour_lights"
  generic_devices_var: !input "generic_devices"
  colour_temperature_var: !input "colour_temperature"
  grace_period_var: !input "grace_period"
  auto_on_occupancy_var: !input "auto_on_occupancy"
  auto_on_light_var: !input "auto_on_light"
  auto_on_dark_var: !input "auto_on_dark"
  auto_off_var: !input "auto_off"
mode: restart
max_exceeded: silent
trigger:
  - platform: state
    entity_id: !input "occupancy"
    id: occupancy
  - platform: state
    entity_id: !input "thresholds"
    not_to: null
    id: threshold
condition: []
action:
  - if:
      - condition: or
        conditions:
          - condition: state
            entity_id: !input "occupancy"
            state: "off"
          - condition: and
            conditions:
              - condition: trigger
                id: threshold
              - condition: state
                entity_id: !input "thresholds"
                state: "off"
    then:
      - if:
          - condition: template
            value_template: "{{ auto_off_var }}"
        then:
          - if:
              - condition: template
                value_template: '{{ expand(white_lights_var, colour_lights_var, generic_devices_var) | map(attribute="entity_id") | list != [] }}'
            then:
              - service: homeassistant.turn_off
                target:
                  entity_id: '{{ expand(white_lights_var, colour_lights_var, generic_devices_var) | map(attribute="entity_id") | list }}'
    else:
      - if:
          - condition: trigger
            id: occupancy
          - condition: template
            value_template: "{{ auto_off_var }}"
          - condition: template
            value_template: "{{ as_timestamp(trigger.to_state.last_changed) - as_timestamp(trigger.from_state.last_changed) < grace_period_var }}"
          - condition: template
            value_template: |
              {% set ns = namespace() %}
              {% if thresholds_var == [] %}
                {{ true }}
              {% else %}
                {% for threshold_var in thresholds_var -%}
                  {% if ns.last_changed is defined %}
                    {% set ns.last_changed = max(ns.last_changed, states[threshold_var].last_changed) %}
                  {% else %}
                    {% set ns.last_changed = states[threshold_var].last_changed %}
                  {% endif %}
                {% endfor -%}
                {{ as_timestamp(trigger.to_state.last_changed) - as_timestamp(ns.last_changed) < grace_period_var }}
              {% endif %}
        then:
          - if:
              - condition: template
                value_template: '{{ expand(white_lights_var, colour_lights_var, generic_devices_var) | selectattr("last_changed", ">=", trigger.from_state.last_changed) | map(attribute="entity_id") | list != [] }}'
            then:
              - service: homeassistant.turn_on
                target:
                  entity_id: '{{ expand(white_lights_var, colour_lights_var, generic_devices_var) | selectattr("last_changed", ">=", trigger.from_state.last_changed) | map(attribute="entity_id") | list }}'
        else:
          - if:
              - condition: or
                conditions:
                  - condition: and
                    conditions:
                      - condition: trigger
                        id: occupancy
                      - condition: template
                        value_template: "{{ auto_on_occupancy_var }}"
                  - condition: and
                    conditions:
                      - condition: trigger
                        id: threshold
                      - condition: template
                        value_template: "{{ auto_on_light_var }}"
                      - condition: template
                        value_template: "{{ trigger.from_state.attributes.sensor_value < trigger.to_state.attributes.sensor_value }}"
                  - condition: and
                    conditions:
                      - condition: trigger
                        id: threshold
                      - condition: template
                        value_template: "{{ auto_on_dark_var }}"
                      - condition: template
                        value_template: "{{ trigger.from_state.attributes.sensor_value > trigger.to_state.attributes.sensor_value }}"
              - condition: or
                conditions:
                  - condition: template
                    value_template: "{{ thresholds_var == [] }}"
                  - condition: not
                    conditions:
                      - condition: state
                        entity_id: !input "thresholds"
                        state: "off"
            then:
              - parallel:
                  - if:
                      - condition: template
                        value_template: "{{ colour_lights_var != [] }}"
                    then:
                      - service: light.turn_on
                        target:
                          entity_id: !input "colour_lights"
                        data:
                          rgb_color: !input "colour"
                          brightness_pct: !input "brightness"
                  - if:
                      - condition: template
                        value_template: "{{ white_lights_var != [] }}"
                    then:
                      - service: light.turn_on
                        target:
                          entity_id: !input "white_lights"
                        data:
                          color_temp_kelvin: "{{ 1000000 / colour_temperature_var }}"
                          brightness_pct: !input "brightness"
                  - if:
                      - condition: template
                        value_template: "{{ generic_devices_var != [] }}"
                    then:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: !input "generic_devices"
