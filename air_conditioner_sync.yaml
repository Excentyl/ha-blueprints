blueprint:
  name: Air Conditioner Sync
  description: Syncronises a custom thermostat which combines the heat and cool HVAC modes of an air conditioner with a single heat/cool HVAC mode.
  domain: automation
  input:
    air_conditioner:
      name: Air Conditioner
      description: The air conditioner.
      selector:
        entity:
          filter:
            - domain:
                - climate
          multiple: false
    custom_thermostat:
      name: Custom Thermostat
      description: The custom thermostat which will control the air condition.
      selector:
        entity:
          filter:
            - domain:
                - climate
          multiple: false
    condensers:
      name: Condensers
      description: The sensors which show the mode of the condenser. The correct one will be automatically determine the correct one.
      selector:
        entity:
          filter:
            - domain:
                - sensor
          multiple: true
  source_url: https://github.com/Excentyl/ha-blueprints/blob/main/air_conditioner_sync.yaml
variables:
  custom_thermostat_var: !input custom_thermostat
mode: restart
max_exceeded: silent
trigger:
  - platform: state
    entity_id: !input custom_thermostat
    id: custom_thermostat
  - platform: state
    entity_id: !input condensers
    id: condensers
condition: []
action:
  - delay:
      milliseconds: 50
  - repeat:
      for_each: !input condensers
      sequence:
        - if:
            - condition: template
              value_template:
                "{% for air_conditioner in state_attr(repeat.item, 'air_conditioners')
                %}\n  {% if air_conditioner.thermostat == custom_thermostat_var %}\n    true\n
                \   {% break %}\n  {% endif %}\n{% endfor %}\n"
          then:
            - variables:
                air_conditioner_var:
                  "{% for air_conditioner in state_attr(repeat.item,
                  'air_conditioners') %}\n  {% if air_conditioner.thermostat == custom_thermostat_var
                  %}\n    {{ air_conditioner }}\n    {% break %}\n  {% endif %}\n{% endfor
                  %}\n"
                requested_mode_var:
                  "{% if states(air_conditioner_var.heater) == 'on' %}\n
                  \ Heat\n{% elif states(air_conditioner_var.cooler) == 'on' %}\n  Cool\n{%
                  else %}\n  Off\n{% endif %}\n"
                temperature_attribute_var:
                  "{% if states(air_conditioner_var.thermostat)
                  == 'heat_cool' %}\n  {% if states(repeat.item) | slugify == 'cool' %}\n
                  \   target_temp_high\n  {% else %}\n    target_temp_low\n  {% endif %}\n{%
                  else %}\n  temperature\n{% endif %}\n"
            - if:
                - condition: state
                  entity_id: !input custom_thermostat
                  state: "off"
              then:
                - action: climate.set_hvac_mode
                  data:
                    hvac_mode: "off"
                  target:
                    entity_id: !input air_conditioner
              else:
                - action: climate.set_temperature
                  data:
                    temperature:
                      "{{ state_attr(custom_thermostat_var, temperature_attribute_var)
                      }}"
                    hvac_mode:
                      "{{ requested_mode_var | slugify if requested_mode_var == states(repeat.item)
                      else 'off' }}"
                  target:
                    entity_id: !input air_conditioner
